mod Object
  fn new : o
    `JSON.stringify(:o:)`
  end

  fn get : o, item
    `JSON.stringify(JSON.parse(JSON.stringify(:o:)).:item:)`
  end

  fn put : o, item, v
    `var x = JSON.parse(JSON.stringify(:o:));
     x.:item: = ':v:';
     if (typeof(:v:) !== 'undefined'){
     x.:item: = :v:;
     } 
     JSON.stringify(x);
    `
  end

  fn merge : a, b
    `
    if (typeof(:a:) !== 'object' && typeof(:b:) !== 'object') {
      throw "both arguments must be objects"
    } else {
      JSON.stringify(Object.assign(:a:,:b:))
    }
   `
  end 

  fn keys : i
    `Object.keys(:i:)`
  end
end

mod Array

  fn size : array
    `:array:.length`
  end

  fn at : array, index
   `:array:[:index:]`
  end

  fn each : array, f
    i = 0
    while i < Array.size(array)
      item = Array.at(array, i)
      f(item)
      i = i + 1  
    end
  end

  fn append : array, i
  `var n = :array:
   if (typeof(:i:) == 'undefined'){
     n.push(':i:')
   } else {
     n.push(:i:)
   }
   n`
  end

  fn map : array, f
    i = 0
    n = []
    while i < Array.size(array)
      item = Array.at(array, i)
      n = Array.append(n, f(item))
      i = i + 1  
    end
    n
  end
end

fn go : i
  {"age": `(:i:+1).toString()` + "_cool"}
end

fn x : i
 [4,5,6, {"a": 1}]
end

# x(1) |> println()
# Array.map([1,2,3], go) |> Array.at(0) |> println()

# Array.map([1,2,3], x)  |> println()

# Array.map([1,2,3], x) |>  Array.at(0) |> Array.at(3) |> Object.keys() |> println()

# Array.map([1,2,3], x) |> println()

fn ba
 `var a = [1,2,{"a":{"n": 1}}]; a;`
end

fn b
 `var a = {"a":{"n": 1}}; a;`
end


  fn getx : o, item
    `a = :o:.:item:; a;`
  end

my = {"a":{"b":1}}

fn to_json : i
  `JSON.stringify(JSON.parse(JSON.stringify(:i:)))`
end

getx(my, "a") |> to_json |> println()

# println(ba())

# println(`var b = {"a":1}; b`)

# println(Array.at(v, 0))

# println(Array.at([{"name":"kings"}],0))

#a = ["a","b",[1,2,"a"]]
#Array.at(a, 2) |> println()